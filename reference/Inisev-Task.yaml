openapi: 3.1.0
info:
  title: 'Inisev Task '
  version: '1.0'
  summary: Inisev assesment task
servers:
  - url: 'http://localhost:3000'
paths:
  '/users/{userId}':
    parameters:
      - schema:
          type: integer
        name: userId
        in: path
        required: true
        description: Id of an existing user.
    get:
      summary: Get User Info by User ID
      tags: []
      responses:
        '200':
          description: User Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                Get User Alice Smith:
                  value:
                    id: 142
                    firstName: Alice
                    lastName: Smith
                    email: alice.smith@gmail.com
                    dateOfBirth: '1997-10-31'
                    emailVerified: true
                    signUpDate: '2019-08-24'
        '404':
          description: User Not Found
      operationId: get-users-userId
      description: Retrieve the information of the user with the matching user ID.
    patch:
      summary: Update User Information
      operationId: patch-users-userId
      responses:
        '200':
          description: User Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                Updated User Rebecca Baker:
                  value:
                    id: 13
                    firstName: Rebecca
                    lastName: Baker
                    email: rebecca@gmail.com
                    dateOfBirth: '1985-10-02'
                    emailVerified: false
                    createDate: '2019-08-24'
        '404':
          description: User Not Found
        '409':
          description: Email Already Taken
      description: Update the information of an existing user.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                  description: 'If a new email is given, the user''s email verified property will be set to false.'
                dateOfBirth:
                  type: string
            examples:
              Update First Name:
                value:
                  firstName: Rebecca
              Update Email:
                value:
                  email: rebecca@gmail.com
              Update Last Name & Date of Birth:
                value:
                  lastName: Baker
                  dateOfBirth: '1985-10-02'
        description: Patch user properties to update.
  /user:
    post:
      summary: Create New User
      operationId: post-user
      responses:
        '200':
          description: User Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                New User Bob Fellow:
                  value:
                    id: 12
                    firstName: Bob
                    lastName: Fellow
                    email: bob.fellow@gmail.com
                    dateOfBirth: '1996-08-24'
                    emailVerified: false
                    createDate: '2020-11-18'
        '400':
          description: Missing Required Information
        '409':
          description: Email Already Taken
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                dateOfBirth:
                  type: string
                  format: date
              required:
                - firstName
                - lastName
                - email
                - dateOfBirth
            examples:
              Create User Bob Fellow:
                value:
                  firstName: Bob
                  lastName: Fellow
                  email: bob.fellow@gmail.com
                  dateOfBirth: '1996-08-24'
        description: Post the necessary fields for the API to create a new user.
      description: Create a new user.
  /api/post:
    get:
      summary: List Posts
      tags:
        - Subscriptions
      responses: {}
      operationId: get-api-post
    post:
      summary: Create Post
      tags:
        - Subscriptions
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      title:
                        type: string
                        minLength: 1
                      content:
                        type: string
                        minLength: 1
                      slug:
                        type: string
                        minLength: 1
                      website_id:
                        type: number
                      uuid:
                        type: string
                        minLength: 1
                      updated_at:
                        type: string
                        minLength: 1
                      created_at:
                        type: string
                        minLength: 1
                      id:
                        type: number
                      website:
                        type: object
                        properties:
                          id:
                            type: number
                          uuid:
                            type: string
                            minLength: 1
                          name:
                            type: string
                            minLength: 1
                          url:
                            type: string
                            minLength: 1
                          status:
                            type: number
                          created_at:
                            type: string
                            minLength: 1
                          updated_at:
                            type: string
                            minLength: 1
                          deleted_at: {}
                          subscriptions:
                            type: array
                            uniqueItems: true
                            minItems: 1
                            items:
                              required:
                                - id
                                - uuid
                                - subscription_user_id
                                - website_id
                                - isActive
                                - created_at
                                - updated_at
                              properties:
                                id:
                                  type: number
                                uuid:
                                  type: string
                                  minLength: 1
                                subscription_user_id:
                                  type: number
                                website_id:
                                  type: number
                                isActive:
                                  type: number
                                created_at:
                                  type: string
                                  minLength: 1
                                updated_at:
                                  type: string
                                  minLength: 1
                                deleted_at: {}
                                sent_posts:
                                  type: array
                                  uniqueItems: true
                                  minItems: 1
                                  items:
                                    required:
                                      - id
                                      - subscription_user_id
                                      - subscription_id
                                      - post_id
                                      - created_at
                                      - updated_at
                                    properties:
                                      id:
                                        type: number
                                      subscription_user_id:
                                        type: number
                                      subscription_id:
                                        type: number
                                      post_id:
                                        type: number
                                      created_at:
                                        type: string
                                        minLength: 1
                                      updated_at:
                                        type: string
                                        minLength: 1
                        required:
                          - id
                          - uuid
                          - name
                          - url
                          - status
                          - created_at
                          - updated_at
                          - subscriptions
                    required:
                      - title
                      - content
                      - slug
                      - website_id
                      - uuid
                      - updated_at
                      - created_at
                      - id
                      - website
                  status:
                    type: string
                    minLength: 1
                  message:
                    type: string
                    minLength: 1
                required:
                  - data
                  - status
                  - message
                x-examples:
                  example-1:
                    data:
                      title: Awesome postasd
                      content: Test content
                      slug: example-post-28
                      website_id: 3
                      uuid: c0cf5df4-7ff8-4868-8ce8-a6b63e898f4f
                      updated_at: '2022-04-17T15:32:28.000000Z'
                      created_at: '2022-04-17T15:32:28.000000Z'
                      id: 10
                      website:
                        id: 3
                        uuid: bf6ca748-c26a-4549-a2d9-f8079df9c05f
                        name: Website cool
                        url: 'http://example.com'
                        status: 0
                        created_at: '2022-04-17T13:35:41.000000Z'
                        updated_at: '2022-04-17T13:35:41.000000Z'
                        deleted_at: null
                        subscriptions:
                          - id: 1
                            uuid: 6043bbd8-af60-4dae-a092-a4f5a96b959e
                            subscription_user_id: 2
                            website_id: 3
                            isActive: 1
                            created_at: '2022-04-17T14:37:55.000000Z'
                            updated_at: '2022-04-17T14:37:55.000000Z'
                            deleted_at: null
                            sent_posts:
                              - id: 1
                                subscription_user_id: 2
                                subscription_id: 1
                                post_id: 1
                                created_at: '2022-04-17T15:05:52.000000Z'
                                updated_at: '2022-04-17T15:05:52.000000Z'
                              - id: 2
                                subscription_user_id: 2
                                subscription_id: 1
                                post_id: 2
                                created_at: '2022-04-17T15:05:56.000000Z'
                                updated_at: '2022-04-17T15:05:56.000000Z'
                              - id: 3
                                subscription_user_id: 2
                                subscription_id: 1
                                post_id: 3
                                created_at: '2022-04-17T15:24:47.000000Z'
                                updated_at: '2022-04-17T15:24:47.000000Z'
                              - id: 4
                                subscription_user_id: 2
                                subscription_id: 1
                                post_id: 4
                                created_at: '2022-04-17T15:24:50.000000Z'
                                updated_at: '2022-04-17T15:24:50.000000Z'
                              - id: 5
                                subscription_user_id: 2
                                subscription_id: 1
                                post_id: 5
                                created_at: '2022-04-17T15:24:53.000000Z'
                                updated_at: '2022-04-17T15:24:53.000000Z'
                              - id: 6
                                subscription_user_id: 2
                                subscription_id: 1
                                post_id: 6
                                created_at: '2022-04-17T15:24:56.000000Z'
                                updated_at: '2022-04-17T15:24:56.000000Z'
                              - id: 7
                                subscription_user_id: 2
                                subscription_id: 1
                                post_id: 7
                                created_at: '2022-04-17T15:24:59.000000Z'
                                updated_at: '2022-04-17T15:24:59.000000Z'
                              - id: 8
                                subscription_user_id: 2
                                subscription_id: 1
                                post_id: 8
                                created_at: '2022-04-17T15:25:03.000000Z'
                                updated_at: '2022-04-17T15:25:03.000000Z'
                              - id: 9
                                subscription_user_id: 2
                                subscription_id: 1
                                post_id: 9
                                created_at: '2022-04-17T15:26:14.000000Z'
                                updated_at: '2022-04-17T15:26:14.000000Z'
                    status: success
                    message: Post added successfully
      operationId: post-api-post
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              properties:
                title:
                  type: string
                  minLength: 1
                content:
                  type: string
                  minLength: 1
                website_id:
                  type: number
                slug:
                  type: string
                  minLength: 1
              required:
                - title
                - content
                - website_id
                - slug
              x-examples:
                example-1:
                  title: Awesome postasd
                  content: Test content
                  website_id: 3
                  slug: example-post-27
  /api/website:
    get:
      summary: List websites
      tags:
        - Website
      responses: {}
      operationId: get-api-website
    post:
      summary: Create website
      tags:
        - Website
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      name:
                        type: string
                        minLength: 1
                      url:
                        type: string
                        minLength: 1
                      uuid:
                        type: string
                        minLength: 1
                      updated_at:
                        type: string
                        minLength: 1
                      created_at:
                        type: string
                        minLength: 1
                      id:
                        type: number
                    required:
                      - name
                      - url
                      - uuid
                      - updated_at
                      - created_at
                      - id
                  status:
                    type: string
                    minLength: 1
                  message:
                    type: string
                    minLength: 1
                required:
                  - data
                  - status
                  - message
                x-examples:
                  example-1:
                    data:
                      name: Website cool
                      url: 'http://example.com'
                      uuid: bf6ca748-c26a-4549-a2d9-f8079df9c05f
                      updated_at: '2022-04-17T13:35:41.000000Z'
                      created_at: '2022-04-17T13:35:41.000000Z'
                      id: 3
                    status: success
                    message: Website created successfully
            application/xml:
              schema:
                type: object
                properties: {}
      operationId: post-api-website
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              properties:
                name:
                  type: string
                  minLength: 1
                url:
                  type: string
                  minLength: 1
              required:
                - name
                - url
              x-examples:
                example-1:
                  name: Website cool
                  url: 'http://example.com'
  /api/subscription-users:
    get:
      summary: List users
      tags:
        - Subscription Users
      responses: {}
      operationId: get-api-subscription-users
    post:
      summary: Create user
      tags:
        - Subscription Users
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      name:
                        type: string
                        minLength: 1
                      email:
                        type: string
                        minLength: 1
                      uuid:
                        type: string
                        minLength: 1
                      updated_at:
                        type: string
                        minLength: 1
                      created_at:
                        type: string
                        minLength: 1
                      id:
                        type: number
                    required:
                      - name
                      - email
                      - uuid
                      - updated_at
                      - created_at
                      - id
                  status:
                    type: string
                    minLength: 1
                  message:
                    type: string
                    minLength: 1
                required:
                  - data
                  - status
                  - message
                x-examples:
                  example-1:
                    data:
                      name: isaac
                      email: isaac4@example.com
                      uuid: 8f6395a2-4d4e-47d1-96e8-f8a3cc3ca08e
                      updated_at: '2022-04-17T15:35:36.000000Z'
                      created_at: '2022-04-17T15:35:36.000000Z'
                      id: 3
                    status: success
                    message: Subscription User created successfully
      operationId: post-api-subscription-users
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              properties:
                name:
                  type: string
                  minLength: 1
                email:
                  type: string
                  minLength: 1
              required:
                - name
                - email
              x-examples:
                example-1:
                  name: isaac
                  email: isaac2@example.com
  /api/subscription/create:
    post:
      summary: Create subscription
      tags:
        - Subscription Management
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      subscription_user_id:
                        type: string
                        minLength: 1
                      website_id:
                        type: string
                        minLength: 1
                      uuid:
                        type: string
                        minLength: 1
                      updated_at:
                        type: string
                        minLength: 1
                      created_at:
                        type: string
                        minLength: 1
                      id:
                        type: number
                    required:
                      - subscription_user_id
                      - website_id
                      - uuid
                      - updated_at
                      - created_at
                      - id
                  status:
                    type: string
                    minLength: 1
                  message:
                    type: string
                    minLength: 1
                required:
                  - data
                  - status
                  - message
                x-examples:
                  example-1:
                    data:
                      subscription_user_id: '2'
                      website_id: '4'
                      uuid: 6dac5a5d-c96a-4c83-ae8e-ff7cc951a48e
                      updated_at: '2022-04-17T15:38:24.000000Z'
                      created_at: '2022-04-17T15:38:24.000000Z'
                      id: 2
                    status: success
                    message: User successfully subscribed
      operationId: post-api-subscription-create
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              properties:
                subscription_user_id:
                  type: string
                  minLength: 1
                website_id:
                  type: string
                  minLength: 1
              required:
                - subscription_user_id
                - website_id
              x-examples:
                example-1:
                  subscription_user_id: '2'
                  website_id: '3'
  /api/subscription/remove:
    post:
      summary: Remove/ Unsubscribe user
      tags:
        - Subscription Management
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  data:
                    type: number
                  status:
                    type: string
                    minLength: 1
                  message:
                    type: string
                    minLength: 1
                required:
                  - data
                  - status
                  - message
                x-examples:
                  example-1:
                    data: 1
                    status: success
                    message: User subscription successfully removed
      operationId: post-api-subscription-remove
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              properties:
                subscription_user_id:
                  type: string
                  minLength: 1
                website_id:
                  type: string
                  minLength: 1
              required:
                - subscription_user_id
                - website_id
              x-examples:
                example-1:
                  subscription_user_id: '2'
                  website_id: '3'
components:
  schemas:
    User:
      title: User
      type: object
      description: ''
      examples:
        - id: 142
          firstName: Alice
          lastName: Smith
          email: alice.smith@gmail.com
          dateOfBirth: '1997-10-31'
          emailVerified: true
          signUpDate: '2019-08-24'
      properties:
        id:
          type: integer
          description: Unique identifier for the given user.
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        dateOfBirth:
          type: string
          format: date
          example: '1997-10-31'
        emailVerified:
          type: boolean
          description: Set to true if the user's email has been verified.
        createDate:
          type: string
          format: date
          description: The date that the user was created.
      required:
        - id
        - firstName
        - lastName
        - email
        - emailVerified
